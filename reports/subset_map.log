Traceback (most recent call last):
  File "/home/phil/mini38/envs/work/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/phil/mini38/envs/work/lib/python3.8/site-packages/nbclient/client.py", line 1082, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/phil/mini38/envs/work/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/phil/mini38/envs/work/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/phil/mini38/envs/work/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/phil/mini38/envs/work/lib/python3.8/site-packages/nbclient/client.py", line 535, in async_execute
    await self.async_execute_cell(
  File "/home/phil/mini38/envs/work/lib/python3.8/site-packages/nbclient/client.py", line 827, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/phil/mini38/envs/work/lib/python3.8/site-packages/nbclient/client.py", line 735, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#
# customize extent, read_files and small_shapes here
#
# extent order (xleft, xright, ybot, ytop)
extent = [130, 140, 30, 40]  # Osaka
# extent = [-125, -115,35, 50]  #bc/washington/oregon
read_files = True
small_shapes = Path().home() / "pha_shapes_asia"
#
#
#
small_shapes.mkdir(exist_ok=True, parents=True)
#
# read either the original shape files or the subsetted
# geojson files
#
gpd_dict = {}
if read_files:
    all_cia = a301_lib.data_share / "openstreetmap/WDBII_shp/f"
    all_cia = list(all_cia.glob("*"))
    for item in all_cia:
        gpd_dict[item.name] = gpd.read_file(item)
        print(f"read {item.name}")

    all_gshhs = a301_lib.data_share / "openstreetmap/GSHHS_shp/f"
    all_gshhs = list(all_gshhs.glob("*"))

    for item in all_gshhs:
        gpd_dict[item.name] = gpd.read_file(item)
        print(f"read {item.name}")
else:
    shape_files = list(small_shapes.glob("*"))
    for item in shape_files:
        key = item.stem
        gpd_dict[key] = gpd.read_file(item)
        print((f"reading saved shapefile {item} with\n"
               f"{len(gpd_dict[key])} rows"))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mCPLE_OpenFailedError[0m                      Traceback (most recent call last)
[0;32mfiona/_shim.pyx[0m in [0;36mfiona._shim.gdal_open_vector[0;34m()[0m

[0;32mfiona/_err.pyx[0m in [0;36mfiona._err.exc_wrap_pointer[0;34m()[0m

[0;31mCPLE_OpenFailedError[0m: '/home/phil/work/data_share/openstreetmap/WDBII_shp/f/WDBII_river_f_L07.prj' not recognized as a supported file format.

During handling of the above exception, another exception occurred:

[0;31mDriverError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-65e0d69e3733>[0m in [0;36m<module>[0;34m[0m
[1;32m     20[0m     [0mall_cia[0m [0;34m=[0m [0mlist[0m[0;34m([0m[0mall_cia[0m[0;34m.[0m[0mglob[0m[0;34m([0m[0;34m"*"[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m     [0;32mfor[0m [0mitem[0m [0;32min[0m [0mall_cia[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 22[0;31m         [0mgpd_dict[0m[0;34m[[0m[0mitem[0m[0;34m.[0m[0mname[0m[0;34m][0m [0;34m=[0m [0mgpd[0m[0;34m.[0m[0mread_file[0m[0;34m([0m[0mitem[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     23[0m         [0mprint[0m[0;34m([0m[0;34mf"read {item.name}"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     24[0m [0;34m[0m[0m

[0;32m~/mini38/envs/work/lib/python3.8/site-packages/geopandas/io/file.py[0m in [0;36m_read_file[0;34m(filename, bbox, mask, rows, **kwargs)[0m
[1;32m     94[0m [0;34m[0m[0m
[1;32m     95[0m     [0;32mwith[0m [0mfiona_env[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 96[0;31m         [0;32mwith[0m [0mreader[0m[0;34m([0m[0mpath_or_bytes[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m [0;32mas[0m [0mfeatures[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     97[0m [0;34m[0m[0m
[1;32m     98[0m             [0;31m# In a future Fiona release the crs attribute of features will[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/mini38/envs/work/lib/python3.8/site-packages/fiona/env.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    398[0m     [0;32mdef[0m [0mwrapper[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    399[0m         [0;32mif[0m [0mlocal[0m[0;34m.[0m[0m_env[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 400[0;31m             [0;32mreturn[0m [0mf[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    401[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    402[0m             [0;32mif[0m [0misinstance[0m[0;34m([0m[0margs[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m [0mstr[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/mini38/envs/work/lib/python3.8/site-packages/fiona/__init__.py[0m in [0;36mopen[0;34m(fp, mode, driver, schema, crs, encoding, layer, vfs, enabled_drivers, crs_wkt, **kwargs)[0m
[1;32m    254[0m [0;34m[0m[0m
[1;32m    255[0m         [0;32mif[0m [0mmode[0m [0;32min[0m [0;34m([0m[0;34m'a'[0m[0;34m,[0m [0;34m'r'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 256[0;31m             c = Collection(path, mode, driver=driver, encoding=encoding,
[0m[1;32m    257[0m                            layer=layer, enabled_drivers=enabled_drivers, **kwargs)
[1;32m    258[0m         [0;32melif[0m [0mmode[0m [0;34m==[0m [0;34m'w'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/mini38/envs/work/lib/python3.8/site-packages/fiona/collection.py[0m in [0;36m__init__[0;34m(self, path, mode, driver, schema, crs, encoding, layer, vsi, archive, enabled_drivers, crs_wkt, ignore_fields, ignore_geometry, **kwargs)[0m
[1;32m    162[0m             [0;32mif[0m [0mself[0m[0;34m.[0m[0mmode[0m [0;34m==[0m [0;34m'r'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    163[0m                 [0mself[0m[0;34m.[0m[0msession[0m [0;34m=[0m [0mSession[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 164[0;31m                 [0mself[0m[0;34m.[0m[0msession[0m[0;34m.[0m[0mstart[0m[0;34m([0m[0mself[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    165[0m             [0;32melif[0m [0mself[0m[0;34m.[0m[0mmode[0m [0;32min[0m [0;34m([0m[0;34m'a'[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    166[0m                 [0mself[0m[0;34m.[0m[0msession[0m [0;34m=[0m [0mWritingSession[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32mfiona/ogrext.pyx[0m in [0;36mfiona.ogrext.Session.start[0;34m()[0m

[0;32mfiona/_shim.pyx[0m in [0;36mfiona._shim.gdal_open_vector[0;34m()[0m

[0;31mDriverError[0m: '/home/phil/work/data_share/openstreetmap/WDBII_shp/f/WDBII_river_f_L07.prj' not recognized as a supported file format.
DriverError: '/home/phil/work/data_share/openstreetmap/WDBII_shp/f/WDBII_river_f_L07.prj' not recognized as a supported file format.

